# 二维数据结构
"""
每个节点有零个或多个子节点（子子孙孙无穷匮也）
无父节点则其为根节点（道生一，一生二）
每个非根节点只有一个父节点（人无二父）
除了根节点外，每个子节点都可分为多个不相交（因为特点3）的子树（开枝散叶，各有繁衍）

节点的度 子树个数
树的度 取节点度中的最大者
叶节点或终端节点 度为0的节点
深度 节点最大层次
祖先 从根到该节点所经分支上的所有节点
森林 多个树

无序树 任意节点的子节点没有顺序关系，也叫自由树
有序树
    二叉树 节点最大的度为2的树
        完全 除开最底层外，所有层的节点都达到了最大个数（1，2，4，8...）
        满   所有层的节点树都达到最大数量
        平衡 任何节点的两课子树的高度差不大于1
        排序 树节点在遍历时是有序的
    顺序存储（不方便）
    链式存储（常用）
"""

class Node:
    def __init__(self, value):
        self.value = value
        self.lchild = None
        self.rchild = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def add(self, value):
        
